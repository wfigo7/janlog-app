name: CD Pipeline

on:
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: "Deploy Backend (Docker -> ECR -> Lambda)"
        required: false
        default: false
        type: boolean

      deploy_infrastructure:
        description: "Deploy Infrastructure (AWS CDK)"
        required: false
        default: false
        type: boolean

      deploy_frontend_web:
        description: "Deploy Frontend Web (Expo Web -> S3)"
        required: false
        default: false
        type: boolean

      environment:
        description: "Deployment Environment"
        required: true
        default: "development"
        type: choice
        options:
          - development
          # - production  # Phase 2で追加

env:
  AWS_REGION: ap-northeast-1
  ENVIRONMENT: ${{ inputs.environment }}
  AWS_ROLE_ARN: arn:aws:iam::713209208161:role/janlog-github-actions-${{ inputs.environment }}

jobs:
  # Backend Deployment Job (OIDC)
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    if: ${{ inputs.deploy_backend }}
    # OIDC認証に必要な権限
    permissions:
      id-token: write
      contents: read
    env:
      ECR_URI: 713209208161.dkr.ecr.ap-northeast-1.amazonaws.com/janlog-api-development
      LAMBDA_FUNCTION_NAME: janlog-api-development

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Backend-${{ github.run_id }}

      - name: Verify AWS connection
        run: |
          echo "Testing AWS connection..."
          aws sts get-caller-identity
          echo "✅ AWS authentication successful (OIDC)"

      - name: Login to AWS Public ECR
        run: |
          echo "Logging in to AWS Public ECR to avoid rate limits..."
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
          echo "✅ AWS Public ECR login successful"

      - name: Deploy Backend
        run: |
          echo "🚀 Deploying Backend (Docker -> ECR -> Lambda)..."
          make deploy-backend
          echo "✅ Backend deployment completed"

      - name: Deployment Summary
        run: |
          echo "📊 Deployment Summary"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Component: Backend (Docker -> ECR -> Lambda)"
          echo "ECR URI: ${{ env.ECR_URI }}:latest"
          echo "Lambda Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
          echo "Status: ✅ Success"
          echo "Authentication: OIDC"

  # Infrastructure Deployment Job (OIDC)
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: ${{ inputs.deploy_infrastructure }}
    # OIDC認証に必要な権限
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: infra/.nvmrc
          cache: "npm"
          cache-dependency-path: infra/package-lock.json

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Infrastructure-${{ github.run_id }}

      - name: Verify AWS connection
        run: |
          echo "Testing AWS connection..."
          aws sts get-caller-identity
          echo "✅ AWS authentication successful (OIDC)"

      - name: Install dependencies
        run: npm ci

      - name: Build CDK project
        run: |
          echo "🔨 Building CDK project..."
          npm run build
          echo "✅ CDK build completed"

      - name: CDK Synth
        run: |
          echo "🔍 Running CDK synth..."
          npm run synth -- --context environment=${{ env.ENVIRONMENT }}
          echo "✅ CDK synth completed"

      - name: Deploy Infrastructure
        run: |
          echo "🚀 Deploying infrastructure with CDK..."
          npm run deploy -- --context environment=${{ env.ENVIRONMENT }} --require-approval never --all
          echo "✅ Infrastructure deployment completed"

      - name: Deployment Summary
        run: |
          echo "📊 Deployment Summary"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Component: Infrastructure (AWS CDK)"
          echo "Status: ✅ Success"
          echo "Authentication: OIDC"

  # Frontend Web Deployment Job (OIDC)
  deploy-frontend-web:
    name: Deploy Frontend Web
    runs-on: ubuntu-latest
    if: ${{ inputs.deploy_frontend_web }}
    # OIDC認証に必要な権限
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: frontend/.nvmrc
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-FrontendWeb-${{ github.run_id }}

      - name: Verify AWS connection
        run: |
          echo "Testing AWS connection..."
          aws sts get-caller-identity
          echo "✅ AWS authentication successful (OIDC)"

      - name: Install dependencies
        run: npm ci

      - name: Build and Deploy Frontend Web
        run: |
          echo "🚀 Building and deploying Frontend Web to S3..."
          cd ..
          make web-build-deploy
          echo "✅ Frontend Web deployment completed"

      - name: Deployment Summary
        run: |
          echo "📊 Deployment Summary"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Component: Frontend Web (Expo Web -> S3 + CloudFront)"
          echo "Status: ✅ Success"
          echo "Authentication: OIDC"
